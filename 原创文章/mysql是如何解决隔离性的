下面是我的私货，

如果觉得不理解，可以继续看我的一个小例子，来说明：




举个例子：
黑板上有几个数字；1,2,3，
A拿这个1数字回来，开始针对这个数字开始加工
B也拿这个1数字回来，开始针对这个数字开始加工
如果是读未提交，会产生这种问题：A会拿到B正在黑板上写的数据，即时拿回来了，但是B有可能又改了，A拿回来的数字是不可靠的
如果是读已提交，数据是准确的，数字肯定是已经写到黑板上了
但是：
在读已提交的基础上，衍生了有不可重复读的特性，就是A拿数字1回来加工时，
B如果改动了黑板上的数字，如果A再去拿一遍数字1，就会发现值已经变了；这个是符合预期的；
在读已提交的基础上，衍生了幻读的特性，就是A拿小于10的数字回来加工时，拿回来了1，2,3； 但是如果B加入了一条数据4；如果A再去拿一遍时，会发现多了一条数据




结合开头的业务例子，主要看应用层的处理，

读已提交这个级别，已经能保证数据是准确的了；不可重复读和幻读都不会导致数据有问题，只是事务的隔离级别提高了；要不要提高隔离级别，这个主要取决于应用层的处理。主要看应用怎么处理，产生的结果业务能不能接受



接下来，写一下mysql是怎么解决不可重复和幻读的？


对于mysql来说，可重复读就是用mvcc 实现的，也叫做快照读；在事务开始后，SELECT 的时候，会生成一个快照。快照读就是读取的一个快照版本，其他事务的改变不会影响整个快照；
生成快照的时机：事务中第一次调用SELECT语句的时候才会生成快照，在此之前事务中执行的update、insert、delete操作都不会生成快照。
不同事务隔离级别下，快照读的区别：

 READ COMMITTED 隔离级别下，每次读取都会重新生成一个快照，所以每次快照都是最新的，也因此事务中每次SELECT也可以看到其它已commit事务所作的更改；

REPEATED READ 隔离级别下，快照会在事务中第一次SELECT语句执行时生成，只有在本事务中对数据进行更改才会更新快照，因此，只有第一次SELECT之前其它已提交事务所作的更改你可以看到，但是如果已执行了SELECT，那么其它事务commit数据，你SELECT是看不到的。


幻读在mysql是通过next key lock实现的：


举个栗子：
create table  child(id int autoincrement,age int ,primary key(id),key idx_age (age));
insert into child(age) values(90),(120);SELECT*FROM child WHERE age>100 FORUPDATE;
在RR级别下，会通过查找第一个大于age字段大于100的记录，也就是120，使用Gap Locks锁住（90,120]的区间的索引，防止插入age大于100的记录



**InnoDB有三种行锁的算法：**

1，Record Lock：单个行记录上的锁。
2，Gap Lock：间隙锁，锁定一个范围，但不包括记录本身。GAP锁的目的，是为了防止同一事务的两次当前读，出现幻读的情况。
3，Next-Key Lock：1+2，锁定一个范围，并且锁定记录本身。对于行的查询，都是采用该方法，主要目的是解决幻读的问题。






对于mysql来说：可重复读已经解决了不可重复读和幻读的问题；



如果你看完了，我建议你再回到开头看两个业务的实际例子，可能有更清晰的认识



参考资料：
[https://stackoverflow.com/questions/11043712/what-is-the-difference-between-non-repeatable-read-and-phantom-read](https://stackoverflow.com/questions/11043712/what-is-the-difference-between-non-repeatable-read-and-phantom-read)





